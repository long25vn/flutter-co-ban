import 'dart:ui';

import 'package:flutter/material.dart';
import 'package:weather/widgets/box_container.dart';
import 'package:weather/main.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:intl/intl.dart';

Future<Response> fetchCurrent() async {
  final response = await http.get(
      'https://api.darksky.net/forecast/5e78215b8ecd6da29dacd01bfcd7a1e0/21.028511,105.804817');

  if (response.statusCode == 200) {
    // If server returns an OK response, parse the JSON.
    return Response.fromJson(json.decode(response.body));
  } else {
    // If that response was not OK, throw an error.
    throw Exception('Failed to load post');
  }
}

class Current extends StatefulWidget {
  const Current({Key key, this.child, this.margin}) : super(key: key);
  final Widget child;
  final EdgeInsetsGeometry margin;
  @override
  _CurrentState createState() => _CurrentState();
}

class _CurrentState extends State<Current> {
  Future<Post> post;
  Future<Response> response;
  double currentTem = 0;

  getCurrentTem() {
    print("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
    FutureBuilder<Response>(
      future: response,
      builder: (context, snapshot) {
        if (snapshot.hasData) {
          print(snapshot.data);
          return Text(snapshot.data.timezone);
        } else if (snapshot.hasError) {
          return Text("${snapshot.error}");
        }
        // By default, show a loading spinner.
        return CircularProgressIndicator();
      },
    );
  }

  ftoC(double f) {
    return (f - 32.0) * (5 / 9);
  }

  getIconVector(String iconString) {
    switch (iconString) {
      case "cloudy":
        {
          return "‚òÅÔ∏è";
        }
        break;

      case "rain":
        {
          return "üåßÔ∏è";
        }
        break;

      case "snow":
        {
          return "‚ùÑÔ∏è";
        }
        break;

      case "sleet":
        {
          return "üå®Ô∏è";
        }
        break;

      case "fog":
        {
          return "üå´Ô∏è";
        }
        break;

      case "wind":
        {
          return "üí®";
        }
        break;

      case "clear-day":
        {
          return "‚òÄÔ∏è";
        }
        break;

      case "clear-night":
        {
          return "üåô";
        }
        break;

      case "partly-cloudy-day":
        {
          return "‚òÅÔ∏è";
        }
        break;

      case "partly-cloudy-night":
        {
          return "‚òÅÔ∏è";
        }
        break;
    }
  }

  String readTimestamp(int timestamp) {
    var now = new DateTime.now();
    var format = new DateFormat('HH:mm E, d/M');
    var date = new DateTime.fromMillisecondsSinceEpoch(timestamp * 1000);
    var diff = now.difference(date);
    var time = '';

    if (diff.inSeconds <= 0 ||
        diff.inSeconds > 0 && diff.inMinutes == 0 ||
        diff.inMinutes > 0 && diff.inHours == 0 ||
        diff.inHours > 0 && diff.inDays == 0) {
      time = format.format(date);
    } else if (diff.inDays > 0 && diff.inDays < 7) {
      if (diff.inDays == 1) {
        time = diff.inDays.toString() + ' DAY AGO';
      } else {
        time = diff.inDays.toString() + ' DAYS AGO';
      }
    } else {
      if (diff.inDays == 7) {
        time = (diff.inDays / 7).floor().toString() + ' WEEK AGO';
      } else {
        time = (diff.inDays / 7).floor().toString() + ' WEEKS AGO';
      }
    }

    return time;
  }

  @override
  void initState() {
    super.initState();
    response = fetchCurrent();
  }

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return Card(
      semanticContainer: true,
      clipBehavior: Clip.antiAliasWithSaveLayer,
      child: Stack(
        children: <Widget>[
          BoxContainer(
            child: Container(
              decoration: BoxDecoration(
                image: DecorationImage(
                  image: NetworkImage(
                      'https://i.pinimg.com/originals/a7/ea/bf/a7eabf3acd2f556ae3611dfb845a8449.jpg'),
                  fit: BoxFit.cover,
                ),
              ),
              child: new BackdropFilter(
                filter: new ImageFilter.blur(sigmaX: 0.0, sigmaY: 0.0),
                child: new Container(
                  decoration:
                      new BoxDecoration(color: Colors.white.withOpacity(0.0)),
                ),
              ),
            ),
          ),
          Positioned(
            top: 16,
            right: 16,
            child: ClipRRect(
              borderRadius: new BorderRadius.circular(4.0),
              child: new BackdropFilter(
                filter: new ImageFilter.blur(sigmaX: 10.0, sigmaY: 10.0),
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: new Container(
                    decoration:
                        new BoxDecoration(color: Colors.white.withOpacity(0.0)),
                    child: Column(
                      children: <Widget>[
                        Text(("Tr·ªùi quang"),
                            style: TextStyle(
                              fontWeight: FontWeight.w400,
                              fontSize: 16,
                              color: Colors.white,
                            )),
                        Row(
                          crossAxisAlignment: CrossAxisAlignment.end,
                          children: <Widget>[
                            new FutureBuilder<Response>(
                              future: response,
                              builder: (context, snapshot) {
                                if (snapshot.hasData) {
                                  print(snapshot.data);
                                  return Text(
                                      (getIconVector(
                                          snapshot.data.currentlymodal.icon)),
                                      style: TextStyle(
                                        fontWeight: FontWeight.w400,
                                        fontSize: 32,
                                        color: Colors.white,
                                      ));
                                } else if (snapshot.hasError) {
                                  return Text("${snapshot.error}");
                                }
                                // By default, show a loading spinner.
                                return CircularProgressIndicator();
                              },
                            ),
                            new FutureBuilder<Response>(
                              future: response,
                              builder: (context, snapshot) {
                                if (snapshot.hasData) {
                                  print(snapshot.data);
                                  return Text(
                                      (ftoC(snapshot.data.currentlymodal
                                                      .temperature)
                                                  .round())
                                              .toString() +
                                          "¬∞",
                                      style: TextStyle(
                                        fontWeight: FontWeight.w400,
                                        fontSize: 32,
                                        color: Colors.white,
                                      ));
                                } else if (snapshot.hasError) {
                                  return Text("${snapshot.error}");
                                }
                                // By default, show a loading spinner.
                                return CircularProgressIndicator();
                              },
                            )
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
          Positioned(
            top: 16,
            left: 16,
            child: new ClipRRect(
              borderRadius: new BorderRadius.circular(4.0),
              child: new BackdropFilter(
                filter: new ImageFilter.blur(sigmaX: 10.0, sigmaY: 10.0),
                child: Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: new Container(
                    decoration:
                        new BoxDecoration(color: Colors.white.withOpacity(0.0)),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: <Widget>[
                        new Text('Ha Noi, VN',
                            style: TextStyle(
                              fontWeight: FontWeight.w400,
                              fontSize: 16,
                              color: Colors.white,
                            )),
                        new FutureBuilder<Response>(
                          future: response,
                          builder: (context, snapshot) {
                            if (snapshot.hasData) {
                              print(snapshot.data);
                              return Text(
                                  readTimestamp(
                                      snapshot.data.currentlymodal.time),
                                  style: TextStyle(
                                    fontWeight: FontWeight.w400,
                                    fontSize: 16,
                                    color: Colors.white,
                                  ));
                            } else if (snapshot.hasError) {
                              return Text("${snapshot.error}");
                            }
                            // By default, show a loading spinner.
                            return CircularProgressIndicator();
                          },
                        )
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        ],
      ),
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(0.0),
      ),
      elevation: 5,
      margin: EdgeInsets.all(0),
    );
  }
}
